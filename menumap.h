//-----------------------------------------------------------------------------
//  Tiny Gaming LLC, Hanna Button Box Thingy
//  Copyright (C) 2022 Tiny Gaming LLC  - All Rights Reserved 
//    
//  This file is part of {Hanna Button Box Thingy}
//  Unauthorized copying of this file, via any medium is strictly
//  prohibited proprietary and confidential
//
//  {Tiny Gaming Hanna Button Box Thingy} can not be copied and/or distributed
//  without the express permission of {Tiny Gaming LLC}
//
//  Authors: McCawley Mark
//  Version 1.3.0
//-----------------------------------------------------------------------------

// menumap.h

#ifndef _MENUMAP_H
#define _MENUMAP_H

// Define a Struct for OLED Menu and USB key presses
typedef struct OLEDMENU
{
  char name1[10];  
  char name2[10];
  char keyId;
};

// Menu to overwrite for reading back from PROGMEM
OLEDMENU menuSRAM;

// [Switches 2,3,4] Lights, VTOL, Landing gear
const OLEDMENU keyMenu[12] PROGMEM = {
  {"LANDING", "LIGHTS", 'l'},                                      // Menu one key 1
  {"VTOL", "MODE", 'k'},                                           // Menu one key 2
  {"LANDING", "GEAR", 'n'},                                        // Menu one key 3
  {"REQUEST", "LANDING", KEY_INSERT},                              // Menu one key 4
  {"OPEN", "MOBIGLAS", KEY_F1},                                    // Menu two key 1
  {"OPEN", "STARMAP", KEY_F2},                                     // Menu two key 2
  {"OPEN", "CHAT", KEY_F11},                                       // Menu two key 3
  {"OPEN", "COMMS", KEY_INSERT},                                   // Menu two key 4
  {"TOGGLE", "WEAPONS", 'p'},                                      // Menu Three key 1
  {"TOGGLE" ,"SHIELDS", 'o'},                                      // Menu Three key 2
  {"TOGGLE", "ENGINES", 'i'},                                      // Menu Three key 3
  {"TOGGLE", "POWER", 'u'},                                        // Menu Three key 4
};

// Blinker class
class Blinker
{
    byte _ledPin;                                                  // pin led is at
    boolean _ledOn;                                                // status flag on is true
    unsigned long _lastToggleMillis;                               // time last toggled
    unsigned long _duration;                                       // for checking time

public:
    unsigned long onDuration;                                      // time led spends on
    unsigned long offDuration;                                     // time led spends off
    boolean blinkOn;                                               // blink or not

    Blinker(byte);                                                 // default expects pin led attached to
    void begin(unsigned long, unsigned long);                      // initilaizes led pin passed values are on and off time in millis
    boolean check(void);                                           // called to check and do blinking
};

// default constructor
// requires pin of led, assigned to _ledpin inits others
Blinker::Blinker(byte pin)
{
    _ledPin = pin;
    _lastToggleMillis = 0;
    _duration = 0;
    _ledOn = false;
    blinkOn = false;
}

// Blinker::begin()
// call at setup inits pin assigns on and off values
void Blinker::begin(unsigned long on, unsigned long off)
{
    pinMode(_ledPin, OUTPUT);                                      // set led pin to output
    onDuration = on;
    offDuration = off;
}

// Blinker::check()
// turns led on or off
boolean Blinker::check()
{
    if (!blinkOn) return false;                                    // only blink if blink on
    if (millis() - _lastToggleMillis > _duration)                  // decide if action needed
    {
        if (_ledOn)                                                // use the ledOn flag to test the led state
        {
            digitalWrite (_ledPin, LOW);                           // its on so turn it off
            _ledOn = false;                                        // clear the flag
            _lastToggleMillis = millis();                          // set  time
            _duration = offDuration;                               // set duration for this state
        }
        else
        {
            digitalWrite (_ledPin, HIGH);                          // its off so turn it on
            _ledOn = true;                                         // set the flag
            _lastToggleMillis = millis();                          // set next action time
            _duration = onDuration;                                // set duration for this state
        }
    }
    return true;
}

// Boot splash screen logo ['DRAKE', 128x64px]
const unsigned char drakeLogo [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0xff, 0xf0, 0x07, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1e, 0x3f, 0xff, 0xf8,
0xff, 0xff, 0xf8, 0x0f, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xf8, 0x30, 0x00, 0x3e, 0x3f, 0xff, 0xfe,
0xff, 0xff, 0xfc, 0x1f, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xf8, 0x78, 0x00, 0xfe, 0x3f, 0xff, 0xff,
0xff, 0xff, 0xfe, 0x3f, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xf8, 0xfc, 0x01, 0xfe, 0x3f, 0xff, 0xff,
0xff, 0xff, 0xfe, 0x3f, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xf8, 0xfc, 0x03, 0xfe, 0x3f, 0xff, 0xfe,
0xff, 0xff, 0xfe, 0x3f, 0x1f, 0xff, 0x83, 0xff, 0xff, 0xf8, 0xfc, 0x07, 0xfc, 0x3f, 0xff, 0xfc,
0x00, 0x00, 0x7e, 0x3f, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xf8, 0xfc, 0x1f, 0xf8, 0x00, 0x00, 0x00,
0xfc, 0x00, 0x7e, 0x3f, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xf8, 0xfc, 0x3f, 0xf0, 0x00, 0x00, 0x00,
0xfc, 0x00, 0x7e, 0x3f, 0x00, 0x0f, 0x87, 0xe0, 0x01, 0xf8, 0xfc, 0x7f, 0xe0, 0x3e, 0x00, 0x00,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xe0, 0x01, 0xf8, 0xfc, 0xff, 0xc0, 0x3f, 0xff, 0xc0,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xe0, 0x01, 0xf8, 0xfc, 0xff, 0x80, 0x3f, 0xff, 0xe0,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xff, 0xe1, 0xf8, 0xfc, 0xff, 0x80, 0x3f, 0xff, 0xf0,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xff, 0xf1, 0xf8, 0xfc, 0xff, 0xc0, 0x3f, 0xff, 0xf0,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xff, 0xf9, 0xf8, 0xfc, 0xff, 0xe0, 0x3f, 0xff, 0xe0,
0xfc, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x87, 0xff, 0xfd, 0xf8, 0xfc, 0xff, 0xf0, 0x3f, 0xff, 0xc0,
0xfc, 0x00, 0x7e, 0x3f, 0x1f, 0xf0, 0x07, 0xff, 0xf9, 0xf8, 0xfc, 0xcf, 0xf0, 0x3f, 0x00, 0x00,
0xfc, 0x00, 0x7e, 0x3f, 0x0f, 0xfc, 0x07, 0xff, 0xf1, 0xf8, 0xfc, 0x87, 0xf8, 0x3f, 0x00, 0x00,
0xfc, 0x00, 0x7e, 0x3f, 0x07, 0xfe, 0x07, 0xe0, 0x01, 0xf8, 0xfc, 0x03, 0xfc, 0x3f, 0x00, 0x00,
0xff, 0xff, 0xfe, 0x3f, 0x01, 0xff, 0x07, 0xe0, 0x01, 0xf8, 0xfc, 0x01, 0xfe, 0x3f, 0xff, 0xf8,
0xff, 0xff, 0xfe, 0x3f, 0x00, 0xff, 0x87, 0xe0, 0x01, 0xf8, 0xfc, 0x00, 0xff, 0x3f, 0xff, 0xfc,
0xff, 0xff, 0xfe, 0x3f, 0x00, 0x7f, 0xc7, 0xe0, 0x01, 0xf8, 0xfc, 0x00, 0x7f, 0x3f, 0xff, 0xfe,
0xff, 0xff, 0xfc, 0x3f, 0x00, 0x1f, 0xc7, 0xe0, 0x01, 0xf8, 0xfc, 0x00, 0x3f, 0x3f, 0xff, 0xfe,
0xff, 0xff, 0xf8, 0x3f, 0x00, 0x0f, 0xc7, 0xe0, 0x01, 0xf8, 0xfc, 0x00, 0x1f, 0x1f, 0xff, 0xfc,
0xff, 0xff, 0xf0, 0x1f, 0x00, 0x07, 0xc7, 0xe0, 0x01, 0xf8, 0xfc, 0x00, 0x0f, 0x0f, 0xff, 0xf8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
0xef, 0x93, 0xc1, 0xe0, 0xf0, 0x78, 0x3c, 0xff, 0x0f, 0x99, 0xe0, 0xe0, 0x78, 0x7c, 0x1e, 0x66,
0xef, 0x93, 0xc1, 0xe0, 0xf0, 0x78, 0x1c, 0xff, 0x07, 0x99, 0xe0, 0xf0, 0xf0, 0x7c, 0x1e, 0x66,
0xef, 0x93, 0xe7, 0xef, 0xf2, 0x79, 0x9c, 0xff, 0x67, 0x99, 0xe7, 0xf9, 0xf3, 0x3c, 0x9e, 0x66,
0xef, 0x93, 0xe7, 0xef, 0xf2, 0x79, 0x9c, 0xff, 0x67, 0x89, 0xe7, 0xf9, 0xf3, 0x3c, 0x9e, 0x66,
0xef, 0x93, 0xe7, 0xef, 0xf2, 0x79, 0x9c, 0xff, 0x67, 0x89, 0xe7, 0xf9, 0xf3, 0x3c, 0x9e, 0x66,
0xef, 0x83, 0xe7, 0xef, 0xf2, 0x79, 0x9c, 0xff, 0x67, 0x89, 0xe7, 0xf9, 0xf3, 0x3c, 0x9e, 0x66,
0xef, 0x83, 0xe7, 0xef, 0xf2, 0x79, 0x9c, 0xff, 0x67, 0x89, 0xe7, 0xf9, 0xf3, 0x3c, 0x9e, 0x66,
0xef, 0x83, 0xe7, 0xe1, 0xf0, 0x78, 0x1c, 0xff, 0x07, 0x81, 0xe1, 0xf9, 0xf0, 0x3c, 0x1f, 0x0e,
0xef, 0x83, 0xe7, 0xe1, 0xf0, 0x78, 0x3c, 0xff, 0x07, 0x81, 0xe1, 0xf9, 0xf0, 0x3c, 0x1f, 0x0e,
0xef, 0xa3, 0xe7, 0xef, 0xf2, 0x79, 0xfc, 0xff, 0x67, 0x81, 0xe7, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x83, 0xe7, 0xef, 0xf2, 0x79, 0xfc, 0xff, 0x67, 0x91, 0xe7, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x83, 0xe7, 0xef, 0xf2, 0x79, 0xfc, 0xcf, 0x67, 0x91, 0xe7, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x93, 0xe7, 0xef, 0xf2, 0x79, 0xfc, 0xcf, 0x67, 0x91, 0xe7, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x93, 0xe7, 0xef, 0xf2, 0x79, 0xfc, 0xcf, 0x67, 0x91, 0xe7, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x93, 0xe7, 0xe1, 0xf2, 0x79, 0xfc, 0x0f, 0x67, 0x99, 0xe0, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xef, 0x93, 0xe7, 0xe0, 0xf2, 0x79, 0xfc, 0x0f, 0x67, 0x99, 0xe0, 0xf9, 0xf3, 0x3c, 0x9f, 0x9e,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#endif  // _MENUMAP_H